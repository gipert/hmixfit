//usr/bin/env root -l ${0}\(\""${0}"\",\""${*}"\"\); exit $?

/* plotspectra
 *
 * Copyright (c) 2019 Luigi Pertoldi
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <utility>
#include <cmath>
#include <stdexcept>
#include "getopt.h"

#include "TMath.h"
#include "TColor.h"
#include "TBox.h"
#include "TH1.h"

namespace poiband {

    /*
     * smallest_poisson_interval(prob_coverage, poisson_mean)
     *
     * Computes the smallest interval boundaries covering `prob_coverage` area of a
     * discrete Poisson distribution with mean `poisson_mean` Returns a
     * `std::pair<float,float>` holding the lower and upper range
     */
    std::pair<float, float> smallest_poisson_interval(double cov, double mu) {

        // sanity check
        if (cov > 1 or cov < 0 or mu < 0) throw std::runtime_error("smallest_poisson_interval(): bad input");

        // initialize lower and upper edges to something
        std::pair<float, float> res = {mu, mu};

        if (mu > 50) { // gaussian approximation os OK
            res = {
                std::round(mu + TMath::NormQuantile((1-cov)/2)*sqrt(mu))-0.5,
                std::round(mu - TMath::NormQuantile((1-cov)/2)*sqrt(mu))+0.5
            };
        }
        else { // do the computation
            // start from the mode, which is the integer part of the mean
            int mode = std::floor(mu);
            int l = mode, u = mode; // let's start from here
            double prob = TMath::PoissonI(mode, mu); // probability covered by the interval

            // check if we're undercovering
            while (prob < cov) {
                // compute probabilities of points just ouside interval
                double prob_u = TMath::PoissonI(u+1, mu);
                double prob_l = TMath::PoissonI(l > 0 ? l-1 : 0, mu);

                // we expand on the right if:
                //  - the lower edge is already at zero
                //  - the prob of the right point is higher than the left
                if (l == 0 or prob_u > prob_l) {
                    u++; // expand interval
                    prob += prob_u; // update coverage
                }
                // otherwhise we expand on the left
                else if (prob_u < prob_l) {
                    l--;
                    prob += prob_l;
                }
                // if prob_u == prob_l we expand on both sides
                else {
                    u++; l--;
                    prob += prob_u + prob_l;
                }
            }
            res = {l == 0 ? 0 : l-0.5, u+0.5};
        }
        return res;
    }

    bool col_defined = false;
    /*
     * draw_poisson_bands(poisson_mean, box_x_left_location, box_size, normalize_to_mean)
     *
     * draws TBoxes corresponding to 68, 95 and 98 coverage intervals for poisson
     * (discrete) distribution with mean `poisson_mean`. The location and size of
     * the box on the x-axis must be provided with the second and third arguments.
     * The boolean argument `residuals` can be used to normalize boxes to the value
     * of the `poisson_mean`. The histogram onto which the bands will be drawn can
     * be provided as a last argument, and the boxes will be clipped to its frame
     * size.
     */
    void draw_poisson_bands(double mu, double x_low, double x_size, bool residuals = false, double scale = 1., TH1* h = nullptr) {

        if (h != nullptr and h->GetDimension() != 1) {
            throw std::runtime_error("draw_poisson_bands(): only 1D histograms are supported");
        }

        int col_idx = 9000;
        if (!col_defined) {
            new TColor(col_idx  , 238./255, 136./255, 102./255, "tol-lig-orange");
            new TColor(col_idx+1, 238./255, 221./255, 136./255, "tol-lig-lightyellow");
            new TColor(col_idx+2, 187./255, 204./255,  51./255, "tol-lig-pear");
            col_defined = true;
        }

        // calculate smallest intervals
        auto sig1 = smallest_poisson_interval(0.682, mu);
        auto sig2 = smallest_poisson_interval(0.954, mu);
        auto sig3 = smallest_poisson_interval(0.997, mu);

        if (residuals) {
            if (mu != 0) {
                sig1.first /= mu; sig1.second /= mu;
                sig2.first /= mu; sig2.second /= mu;
                sig3.first /= mu; sig3.second /= mu;
            }
            else {
                sig1.first = sig1.second = 1;
                sig2.first = sig2.second = 1;
                sig3.first = sig3.second = 1;
            }
        }
        else {
            sig1.first *= scale; sig1.second *= scale;
            sig2.first *= scale; sig2.second *= scale;
            sig3.first *= scale; sig3.second *= scale;
        }

        // compute interval centers (for plotting)
        auto cent_b1 = (sig1.second + sig1.first)/2;
        auto cent_b2 = (sig2.second + sig2.first)/2;
        auto cent_b3 = (sig3.second + sig3.first)/2;

        auto xdw = x_low;
        auto xup = x_low + x_size;

        // do now draw bands outside histogram frame
        if (h != nullptr) {
            auto xc1 = gPad->GetUxmin(); auto xc2 = gPad->GetUxmax();
            auto yc1 = gPad->GetUymin(); auto yc2 = gPad->GetUymax();

            if (sig1.first  < yc1) sig1.first  = yc1;
            if (sig2.first  < yc1) sig2.first  = yc1;
            if (sig3.first  < yc1) sig3.first  = yc1;
            if (sig1.second > yc2) sig1.second = yc2;
            if (sig2.second > yc2) sig2.second = yc2;
            if (sig3.second > yc2) sig3.second = yc2;
            if (xdw < xc1) xdw = xc1;
            if (xup > xc2) xup = xc2;
        }

        auto box_b1 = new TBox(xdw, sig1.first, xup, sig1.second);
        auto box_b2 = new TBox(xdw, sig2.first, xup, sig2.second);
        auto box_b3 = new TBox(xdw, sig3.first, xup, sig3.second);

        box_b3->SetFillColor(col_idx);
        box_b2->SetFillColor(col_idx+1);
        box_b1->SetFillColor(col_idx+2);

        if (box_b3->GetY1() != box_b3->GetY2()) box_b3->Draw();
        if (box_b2->GetY1() != box_b2->GetY2()) box_b2->Draw();
        if (box_b1->GetY1() != box_b1->GetY2()) box_b1->Draw();

        return;
    }
}

void usage() {
    std::cerr << "\n"
              << "USAGE: plotspectra hmixfit-*-histograms.root\n"
              << "\n"
              << "options:\n"
              << "  -h, --help           : print this help message and exit\n"
              << "  -l, --logy           : logarithmic Y axis\n"
              << "  -x, --width <value>  : canvas width in pixels\n"
              << "  -y, --height <value> : canvas height in pixels\n"
              << "  -r, --rebin <value>  : rebin factor\n"
              << "  -p, --pads <value>   : arrangement in pads, example value: 5x4\n"
              << "  -b, --bands          : plot [1,2,3]-sigma bands (smallest intervals) onto data\n"
              << "  -R, --residuals      : plot residuals (data/model) with [1,2,3]-sigma bands\n"
              << "  -c, --collapse2D     : draw TH2s as TH1s by collapsing x and y axes together\n"
              << "  -o, --originals      : plot original histograms, not those used in the fit\n"
              << "\n";
    gSystem->Exit(1);
}

TH1D* collapse(TH2* h) {
    auto hout = h->ProjectionX();
    hout->Add(h->ProjectionY());
    hout->SetName((std::string(h->GetName()) + "_proj").c_str());
    hout->SetTitle((std::string(h->GetTitle()) + " (collapsed)").c_str());
    return hout;
}

void plotspectra(std::string prog = "plotspectra", std::string args = "") {

    // this is for getopt to work
    args = prog + " " + args;

    int argc = 0;
    char** argv = new char*[200];

    // get all arguments
    std::istringstream iss(args);
    std::string word;
    while (iss >> word) {
        char* tmp = new char[200];
        strcpy(tmp, word.c_str());
        argv[argc] = tmp;
        argc++;
    }

    const char* const short_opts = "p:x:y:r:lbRLcoh";
    const option long_opts[] = {
        {"width",      required_argument, nullptr, 'x'},
        {"height",     required_argument, nullptr, 'y'},
        {"rebin",      required_argument, nullptr, 'r'},
        {"pads",       required_argument, nullptr, 'p'},
        {"logy",       no_argument,       nullptr, 'l'},
        {"bands",      no_argument,       nullptr, 'b'},
        {"residuals",  no_argument,       nullptr, 'R'},
        {"legend",     no_argument,       nullptr, 'L'},
        {"collapse2D", no_argument,       nullptr, 'c'},
        {"originals",  no_argument,       nullptr, 'o'},
        {"help",       no_argument,       nullptr, 'h'},
        {nullptr,      no_argument,       nullptr, 0  }
    };

    // defaults
    int width = 1000;
    int height = 600;
    int rebin = 1;
    bool logy = false;
    std::string pads = "";
    bool bands = false;
    bool residuals = false;
    bool draw_legend = false;
    bool collapse_2d = false;
    bool originals = false;

    // read in with getopt
    int opt = 0;
    while ((opt = getopt_long(argc, argv, short_opts, long_opts, nullptr)) != -1) {
        switch (opt) {
            case 'x':
                width = std::stoi(optarg);
                break;
            case 'y':
                height = std::stoi(optarg);
                break;
            case 'r':
                rebin = std::stoi(optarg);
                break;
            case 'p':
                pads = optarg;
                break;
            case 'l':
                logy = true;
                break;
            case 'b':
                bands = true;
                break;
            case 'R':
                residuals = true;
                break;
            case 'L':
                draw_legend = true;
                break;
            case 'c':
                collapse_2d = true;
                break;
            case 'o':
                originals = true;
                break;
            case 'h': // -h or --help
            case '?': // Unrecognized option
            default:
                usage();
        }
    }

    // get extra arguments
    std::vector<std::string> extra_args;
    for(; optind < argc; optind++){
        extra_args.emplace_back(argv[optind]);
    }

    if (extra_args.empty()) usage();

    // do not display any of the standard histogram decorations
    gStyle->SetOptStat(false);
    gStyle->SetOptFit(0);

    auto tf = new TFile(extra_args[0].c_str(), "read");

    TCanvas* canvas = nullptr;
    int pads_x, pads_y;
    if (!pads.empty()) {
        pads_x = std::stoi(pads.substr(0, pads.find('x')));
        pads_y = std::stoi(pads.substr(pads.find('x')+1, std::string::npos));
    }

    // loop over keys in file
    TIter next(tf->GetListOfKeys());
    TKey* key;
    int idx = 0;
    while ((key = dynamic_cast<TKey*>(next()))) {
        auto cl = TClass::GetClass(key->GetClassName());
        TH1 *data, *model, *h;
        // check if it's a folder, otherwise skip
        if (cl->InheritsFrom(TDirectoryFile::Class())) {
            auto d = dynamic_cast<TDirectoryFile*>(key->ReadObj());

            data = dynamic_cast<TH1*>(d->Get(Form("%sfitted_data", (originals ? "originals/" : ""))));
            model = dynamic_cast<TH1*>(d->Get(Form("%stotal_model", (originals ? "originals/" : ""))));

            TParameter<double>* range_low_x;
            TParameter<double>* range_upp_x;
            TParameter<double>* range_low_y;
            TParameter<double>* range_upp_y;

            // check if we're reading a TH2 or a TH1
            bool is_th2 = d->Get("fitted_data")->InheritsFrom(TH2::Class());
            bool was_th2 = is_th2;

            // get the correct range objects accordingly
            if (is_th2) {
                range_low_x = dynamic_cast<TParameter<double>*>(d->Get("fit_range_lower_x"));
                range_upp_x = dynamic_cast<TParameter<double>*>(d->Get("fit_range_upper_x"));
                range_low_y = dynamic_cast<TParameter<double>*>(d->Get("fit_range_lower_y"));
                range_upp_y = dynamic_cast<TParameter<double>*>(d->Get("fit_range_upper_y"));
                // eventually collapse TH2 axes if asked
                if (collapse_2d) {
                    data = collapse(dynamic_cast<TH2*>(data));
                    model = collapse(dynamic_cast<TH2*>(model));
                    is_th2 = false; // now it's a TH1
                    data->Rebin(rebin);
                    model->Rebin(rebin);
                }
                else {
                    dynamic_cast<TH2*>(data)->Rebin2D(rebin);
                    dynamic_cast<TH2*>(model)->Rebin2D(rebin);
                }
            }
            // otherwise it's 1D
            else {
                range_low_x = dynamic_cast<TParameter<double>*>(d->Get("fit_range_lower"));
                range_upp_x = dynamic_cast<TParameter<double>*>(d->Get("fit_range_upper"));
                data->Rebin(rebin);
                model->Rebin(rebin);
            }

            data->SetMarkerStyle(7);
            data->SetFillStyle(3003);
            data->SetLineColorAlpha(kAzure-4, 1);
            data->SetFillColorAlpha(kAzure-4, 1);
            model->SetLineColor(kRed);
            if (!is_th2) model->SetLineWidth(2);

            // calculate z axis maximum for TH2 in "lego" mode.
            // will be set as common maximum range for all z axes.
            // for some reason ROOT does not use the same z range when
            // drawing TH2s with "lego same".
            double th2_zmax = 0;
            if (is_th2) {
                th2_zmax = 1.1*std::max(model->GetMaximum(), data->GetMaximum());
                data->GetZaxis()->SetRangeUser(0, th2_zmax);
                model->GetZaxis()->SetRangeUser(0, th2_zmax);
            }

            // set up canvas
            if (!canvas) {
                canvas = new TCanvas(Form("c_%i", idx), Form("c_%i", idx), width, height);
                if (!pads.empty()) canvas->Divide(pads_x, pads_y, 0, 0);
            }
            if (canvas and !pads.empty()) {
                canvas->cd(idx+1);
                gPad->SetRightMargin(0.01);
                gPad->SetLeftMargin(0.07);
                gPad->SetBottomMargin(0.07);
                gPad->SetTopMargin(0.07);
                // data->GetXaxis()->SetLabelSize(0.05);
                // data->GetYaxis()->SetLabelSize(0.05);
            }
            canvas->SetMargin(0.04, 0.01, 0.07, 0.07);

            auto draw_components = [&](){
                // draw components
                TDirectoryFile* dir;
                if (originals) dir = dynamic_cast<TDirectoryFile*>(d->GetDirectory("originals"));
                else dir = d;
                TIter nextt(dir->GetListOfKeys());
                TKey* keyy;
                while ((keyy = dynamic_cast<TKey*>(nextt()))) {
                    auto cll = TClass::GetClass(keyy->GetClassName());
                    // make sure it's a histogram (whatever dim)
                    if (cll->InheritsFrom(TH1::Class())) {
                        auto obj = keyy->ReadObj();
                        if (std::string(obj->GetName()) == std::string(d->GetName()) or
                            std::string(obj->GetName()) == std::string(d->GetName()) + "_orig") continue;
                        if (is_th2) {
                            h = dynamic_cast<TH2*>(obj)->Rebin2D(rebin);
                            h->SetLineColor(kGray+1);
                            dynamic_cast<TH2*>(h)->Rebin2D(rebin);
                            h->GetZaxis()->SetRangeUser(0, th2_zmax);
                            h->Draw("hist same 0 lego");
                        }
                        else {
                            if (was_th2 and collapse_2d) h = collapse(dynamic_cast<TH2*>(obj));
                            else                         h = dynamic_cast<TH1*>(obj);
                            h->SetLineColor(kGray+1);
                            h->Rebin(rebin);
                            h->Scale(1, "width");
                            h->Draw("hist same");
                        }
                    }
                }
            };

            // poissonian bands?
            if (bands and !is_th2) {
                auto resgraph = dynamic_cast<TH1*>(data->Clone());

                if (residuals) resgraph->Divide(model);
                else resgraph->Scale(1, "width");
                if (range_low_x and range_upp_x) resgraph->GetXaxis()->SetRangeUser(range_low_x->GetVal(), range_upp_x->GetVal());
                if (logy) {
                    double minimum = + std::numeric_limits<double>::infinity();
                    for (int i = 1; i <= resgraph->GetNbinsX(); i++) {
                        auto cont = resgraph->GetBinContent(i);
                        if (cont < minimum and cont > 0) minimum = cont;
                    }
                    resgraph->GetYaxis()->SetRangeUser(0.2*minimum, 2*resgraph->GetMaximum());
                }
                resgraph->Draw("P0 HIST");
                gPad->Update();

                for (int b = resgraph->GetXaxis()->FindBin(range_low_x->GetVal());
                         b <= resgraph->GetXaxis()->FindBin(range_upp_x->GetVal()); ++b) {

                    poiband::draw_poisson_bands(
                        model->GetBinContent(b),
                        resgraph->GetBinLowEdge(b),
                        resgraph->GetBinWidth(b),
                        residuals ? true : false,
                        1./resgraph->GetBinWidth(b),
                        resgraph
                    );

                    if (model->GetBinContent(b) == 0) resgraph->SetBinContent(b, 1);
                }
                if (residuals) resgraph->SetYTitle("data/model");

                if (!residuals) {
                    // draw components
                    draw_components();
                    model->SetLineColor(kBlack);
                    model->SetLineWidth(1);
                    model->Scale(1, "width");
                    model->Draw("hist same");
                }

                resgraph->Draw("P0 SAME HIST");
                if (logy) gPad->SetLogy();

                gPad->RedrawAxis();
                TLine l;
                l.DrawLine(gPad->GetUxmin(), gPad->GetUymax(), gPad->GetUxmax(), gPad->GetUymax());
                l.DrawLine(gPad->GetUxmax(), gPad->GetUymin(), gPad->GetUxmax(), gPad->GetUymax());
            }
            // regular plot
            else {
                if (is_th2) {
                    data->SetZTitle("bin content / bin width");
                    data->Draw("hist 0 lego");
                }
                else {
                    data->SetYTitle("bin content / bin width");
                    data->Scale(1, "width");
                    data->Draw("hist");
                }

                if (logy and  is_th2) gPad->SetLogz();
                if (logy and !is_th2) gPad->SetLogy();

                // draw components
                draw_components();

                // set ranges
                if (range_low_x and range_upp_x) data->GetXaxis()->SetRangeUser(range_low_x->GetVal(), range_upp_x->GetVal());
                if (is_th2 and range_low_y and range_upp_y) data->GetYaxis()->SetRangeUser(range_low_y->GetVal(), range_upp_y->GetVal());

                // redraw data and model
                if (is_th2) {
                    data->Draw("hist 0 lego same");
                    model->Draw("hist 0 lego same");
                }
                else {
                    data->Draw("hist same");
                    model->Scale(1, "width");
                    model->Draw("hist same");
                }
            }
        }

        if (draw_legend) {
            auto l = new TLegend;
            l->SetLineWidth(0);
            l->AddEntry(data, "Data", "f");
            l->AddEntry(model, "Model", "l");
            l->AddEntry(h, "Components", "l");
            l->Draw();
        }

        idx++;
    }
}

// vim: ft=cpp
